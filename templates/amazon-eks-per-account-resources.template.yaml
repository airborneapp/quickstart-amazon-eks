AWSTemplateFormatVersion: "2010-09-09"
Description: Shared resources required by all Amazon EKS Quick Start stacks in this account.
Mappings:
  Config:
    Prefix: { Value: 'eks-quickstart' }
Resources:
  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ['${Prefix}-CopyZips', {Prefix: !FindInMap [Config, Prefix, Value]}]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
      - PolicyName: 'lambda-zips-s3-read'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: s3:GetObject
              Resource: '*'
  ResourceReaderRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ['${Prefix}-ResourceReader', {Prefix: !FindInMap [Config, Prefix, Value]}]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/ReadOnlyAccess'
  CreateVpcRoleRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ['${Prefix}-CreateVpcRole', {Prefix: !FindInMap [Config, Prefix, Value]}]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: create-role
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: "iam:CreateRole"
                Resource: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/CloudFormation-Kubernetes-VPC'
              - Effect: Allow
                Action: "iam:AttachRolePolicy"
                Resource: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/CloudFormation-Kubernetes-VPC'
                Condition:
                  ArnEquals:
                    "iam:PolicyARN":
                      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaENIManagementAccess'
                      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  DeleteBucketContentsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ['${Prefix}-DeleteBucketContents', {Prefix: !FindInMap [Config, Prefix, Value]}]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  ControlPlaneRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ['${Prefix}-ControlPlane', {Prefix: !FindInMap [Config, Prefix, Value]}]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSClusterPolicy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSServicePolicy'
  CleanupLoadBalancersRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ['${Prefix}-CleanupLoadBalancers', {Prefix: !FindInMap [Config, Prefix, Value]}]
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: LambdaRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"
              - Action:
                  - 'elasticloadbalancing:DescribeLoadBalancers'
                  - 'elasticloadbalancing:DescribeTags'
                  - 'elasticloadbalancing:DeleteLoadBalancer'
                  - 'ec2:DescribeTags'
                  - 'ec2:DeleteSecurityGroup'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:RevokeSecurityGroupEgress'
                  - 'ec2:RevokeSecurityGroupIngress'
                Effect: Allow
                Resource: "*"
  CleanupSecurityGroupDependenciesRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ['${Prefix}-CleanupSecurityGroupDependencies', {Prefix: !FindInMap [Config, Prefix, Value]}]
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: LambdaRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"
              - Action:
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:RevokeSecurityGroupEgress'
                  - 'ec2:RevokeSecurityGroupIngress'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DetachNetworkInterface'
                Effect: Allow
                Resource: "*"
  CleanupLambdasRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ['${Prefix}-CleanupLambdas', {Prefix: !FindInMap [Config, Prefix, Value]}]
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: LambdaRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"
              - Action:
                  - 'lambda:ListFunctions'
                  - 'lambda:UpdateFunctionConfiguration'
                  - 'lambda:DeleteFunction'
                Effect: Allow
                Resource: "*"
  GetCallerArnRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ['${Prefix}-GetCallerArn', {Prefix: !FindInMap [Config, Prefix, Value]}]
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: LambdaRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"
              - Action:
                  - 'cloudformation:DescribeStacks'
                  - 'cloudtrail:LookupEvents'
                Effect: Allow
                Resource: "*"
  RegisterTypeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ['${Prefix}-RegisterType', {Prefix: !FindInMap [Config, Prefix, Value]}]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: ResourceTypePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "cloudformation:*"
                  - "iam:PassRole"
                  - "iam:CreateRole"
                  - "iam:CreatePolicy"
                  - "iam:ListPolicyVersions"
                  - "iam:DeletePolicyVersion"
                  - "iam:CreatePolicyVersion"
                  - "iam:AttachRolePolicy"
                  - "ssm:GetParameter"
                  - "ssm:PutParameter"
                  - "sts:GetCallerIdentity"
                Resource: "*"
  RegisterCustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ['${Prefix}-RegisterCustomResource', {Prefix: !FindInMap [Config, Prefix, Value]}]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: ResourceTypePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:*"
                  - "iam:PassRole"
                  - "iam:CreateRole"
                  - "iam:CreatePolicy"
                  - "iam:ListPolicyVersions"
                  - "iam:DeletePolicyVersion"
                  - "iam:CreatePolicyVersion"
                  - "iam:AttachRolePolicy"
                  - "ssm:GetParameter"
                  - "ssm:PutParameter"
                  - "sts:GetCallerIdentity"
                Resource: "*"
  NodeSGRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ['${Prefix}-NodeSG', {Prefix: !FindInMap [Config, Prefix, Value]}]
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - eks:DescribeNodeGroup
                Resource: '*'
  FargateExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ['${Prefix}-FargateExecution', {Prefix: !FindInMap [Config, Prefix, Value]}]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks-fargate-pods.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy'
  FargateProfileRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ['${Prefix}-FargateProfile', {Prefix: !FindInMap [Config, Prefix, Value]}]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: ResourceTypePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "eks:*"
                  - "iam:PassRole"
                  - "iam:GetRole"
                  - "iam:CreateServiceLinkedRole"
                  - "ec2:DescribeSubnets"
                Resource: "*"
  ParameterResolverRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ['${Prefix}-ParameterResolver', {Prefix: !FindInMap [Config, Prefix, Value]}]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: "/"
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: param-resolver
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:GetParametersByPath'
                  - 'ssm:GetParameters'
                  - 'ssm:GetParameterHistory'
                  - 'ssm:GetParameter'
                Resource: !Sub ['arn:${AWS::Partition}:ssm:*:${AWS::AccountId}:parameter/quickstart/${Prefix}/*', {Prefix: !FindInMap [Config, Prefix, Value]}]
  ParameterResolverFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'QuickStart-ParameterResolver'
      Code:
        ZipFile: |
          import traceback
          import json
          import re
          import boto3
          from functools import partial


          def template_iterator(obj, params, ssm, prefix):
              if isinstance(obj, dict):
                  for k in obj:
                      obj[k] = template_iterator(obj[k], params, ssm, prefix)
              elif isinstance(obj, list):
                  for i, v in enumerate(obj):
                      obj[i] = template_iterator(v, params, ssm, prefix)
              elif isinstance(obj, str):
                  func = partial(resolver, ssm, prefix, params['params'])
                  obj = re.sub(r'{%[\w/<>]+%}', func, obj)
              return obj


          def resolver(ssm, prefix, params, match):
              default = None
              param = match.group()[2:-2]
              if param.startswith('%'):
                  return match.group()
              if '|' in param:
                  default = ''.join(param.split('|')[1:])
                  param = param.split('|')[0]
              func = partial(param_resolve, params)
              param = re.sub(r'<\w+>', func, param)
              try:
                  resp = ssm.get_parameter(Name=prefix + param)
              except ssm.exceptions.ParameterNotFound:
                  if default is None:
                      raise Exception(f"Parameter {param} not found")
                  return default
              return resp['Parameter']['Value']


          def param_resolve(params, match):
              return params[match.group()[1:-1]]


          def handler(event, _c):
              print(json.dumps(event))
              macro_response = {
                  "requestId": event["requestId"],
                  "status": "success"
              }
              try:
                  ssm = boto3.client('ssm', region_name=event["region"])
                  params = {
                      "params": event["templateParameterValues"],
                      "template": event["fragment"],
                      "account_id": event["accountId"],
                      "region": event["region"]
                  }
                  response = event["fragment"]
                  prefix = params['template'].get('Mappings',{}).get('Config',{}).get('ParameterPrefix',{}).get('Value',"")
                  macro_response["fragment"] = template_iterator(response, params, ssm, prefix)
              except Exception as e:
                  traceback.print_exc()
                  macro_response["status"] = "failure"
                  macro_response["errorMessage"] = str(e)
              return macro_response
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt ParameterResolverRole.Arn
  ParameterResolverFunctionPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt ParameterResolverFunction.Arn
      Principal: 'cloudformation.amazonaws.com'
  ParameterResolver:
    Type: AWS::CloudFormation::Macro
    Properties:
      Name: 'QuickStartParameterResolver'
      Description: Resolves ssm parameters in templates
      FunctionName: !GetAtt ParameterResolverFunction.Arn
